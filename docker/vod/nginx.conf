worker_processes  auto;

events {
	use epoll;
}

http {
	log_format  main  '$remote_addr $remote_user [$time_local] "$request" '
		'$status "$http_referer" "$http_user_agent"';

	access_log  /dev/stdout  main;
	error_log   stderr debug;

	default_type  application/octet-stream;
	include       /usr/local/nginx/conf/mime.types;

	sendfile    on;
	tcp_nopush  on;
	tcp_nodelay on;

	vod_mode                           local;
	vod_metadata_cache                 metadata_cache 16m;
	vod_response_cache                 response_cache 512m;
	vod_last_modified_types            *;
	vod_segment_duration               9000;
	vod_align_segments_to_key_frames   on;
	vod_dash_fragment_file_name_prefix "segment";
	vod_hls_segment_file_name_prefix   "segment";

	vod_manifest_segment_durations_mode accurate;

	open_file_cache          max=1000 inactive=5m;
	open_file_cache_valid    2m;
	open_file_cache_min_uses 1;
	open_file_cache_errors   on;

	aio on;

	server {
		listen 80 default_server;
		listen [::]:80 default_server;
		
		location ~ ^/([0-9]+)/(.*)$ {
			root /;
			set $width $1;
			set $path $2;
			rewrite ^ /$path break;
			proxy_pass http://127.0.0.1:9001;
			image_filter resize $width 230;
			image_filter_buffer 100M;
			image_filter_jpeg_quality 95;
			expires 7d;
		}
	}

	# server {
	# 	listen 80;
	# 	server_name localhost;
	# 	root /opt/static;

	# 	location ~ ^/videos/.+$ {
	# 		autoindex on;
	# 	}

	# 	location /hls/ {
	# 		vod hls;
	# 		alias /opt/static/videos/;
	# 		add_header Access-Control-Allow-Headers '*';
	# 		add_header Access-Control-Allow-Origin '*';
	# 		add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS';
	# 	}

	# 	location /thumb/ {
	# 		vod thumb;
	# 		alias /opt/static/videos/;
	# 		add_header Access-Control-Allow-Headers '*';
	# 		add_header Access-Control-Allow-Origin '*';
	# 		add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS';
	# 	}

	# 	location /dash/ {
	# 		vod dash;
	# 		alias /opt/static/videos/;
	# 		add_header Access-Control-Allow-Headers '*';
	# 		add_header Access-Control-Allow-Origin '*';
	# 		add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS';
	# 	}

	# 	location /download/  {
	# 		autoindex on;
	# 	  alias /opt/static/videos/;
	# 		if ($request_filename ~ "^.*/(.+\.mp4|zip|tgz|iso|gz|jpeg|jpg)$"){
	# 				set $fname $1;
	# 				add_header Content-Disposition 'attachment; filename="$fname"';
	# 		}
	# 		add_header Content-Disposition 'attachment;';
	# 	}

	# 	location /uploads {
	# 		expires 7d;

	# 		add_header Cache-Control public;
	# 		add_header X-Pownered "nginx_image_filter";
	# 		# HTTP Response Header 增加 proxy_cache 的命中状态，以便于以后调试，检查问题
	# 		add_header X-Cache-Status $upstream_cache_status;

	# 		proxy_pass http://127.0.0.1/_img/uploads;
	# 		# 当收到 HTTP Header Pragma: no-cache 的时候，忽略 proxy_cache
	# 		# 此配置能让浏览器强制刷新的时候，忽略 proxy_cache 重新生成缩略图
	# 		proxy_cache_bypass $http_pragma;
	# 		# 由于 Upload 文件一般都没参数的，所以至今用 host + document_uri 作为
	# 		proxy_cache_key "$host$document_uri";
	# 		# 有效的文件，在服务器缓存 7 天
	# 		proxy_cache_valid 200 7d;
	# 		proxy_cache_use_stale error timeout invalid_header updating;
	# 		proxy_cache_revalidate on;
	# 		# 处理 proxy 的 error
	# 		proxy_intercept_errors on;
	# 		error_page   415 = /assets/415.png;
	# 		error_page   404 = /assets/404.png;
	# 	}

	# 	# 原始图片
	# 	location /_img/uploads {
	# 		alias /opt/static/imgs/$filename;
	# 		expires 7d;
	# 	}

	# 	# 缩略图
	# 	location ~* /_img/uploads/(.+)!(large|lg|md|sm|xs|icon)$ {
	# 		set $filename /$1;

	# 		if (-f $filename) {
	# 		break;
	# 		}

	# 		# 根据 URL 地址 ! 后面的图片版本来准备好需要的参数（宽度、高度、裁剪或缩放）
	# 		set $img_version $2;
	# 		set $img_type resize;
	# 		set $img_w    -;
	# 		set $img_h    -;
	# 		if ($img_version = 'large') {
	# 		set $img_type resize;
	# 		set $img_w    1920;
	# 		}
	# 		if ($img_version = 'lg') {
	# 		set $img_type crop;
	# 		set $img_w    768;
	# 		set $img_h    1024;
	# 		}
	# 		if ($img_version = 'md') {
	# 		set $img_type resize;
	# 		set $img_w    375;
	# 		set $img_h    812;
	# 		}
	# 		if ($img_version = 'sm') {
	# 		set $img_type resize;
	# 		set $img_w    320;
	# 		set $img_h    600;
	# 		}
	# 		if ($img_version = 'xs') {
	# 		set $img_type resize;
	# 		set $img_w    240;
	# 		set $img_h    480;
	# 		}

	# 		if ($img_version = 'icon') {
	# 		set $img_type crop;
	# 		set $img_w    72;
	# 		set $img_h    72;
	# 		}
	# 		rewrite ^ /_$img_type;
	# 	}

	# 	# 缩放图片的处理
	# 	location /_resize {
	# 		alias /opt/static/imgs$filename;
	# 		image_filter resize $img_w $img_h;
	# 		image_filter_jpeg_quality 95;
	# 		image_filter_buffer         20M;
	# 		image_filter_interlace      on;
	# 	}

	# 	# 裁剪图片的处理
	# 	location /_crop {
	# 		alias /opt/static/imgs$filename;
	# 		image_filter crop $img_w $img_h;
	# 		image_filter_jpeg_quality 95;
	# 		image_filter_buffer         20M;
	# 		image_filter_interlace      on;
	# 	}
	# }
}
